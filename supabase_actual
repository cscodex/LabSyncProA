-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.activity_logs (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid,
  action text NOT NULL,
  entity_type text NOT NULL,
  entity_id uuid,
  old_values jsonb,
  new_values jsonb,
  ip_address inet,
  user_agent text,
  created_at timestamp with time zone DEFAULT now(),
  session_id text,
  request_id text,
  duration_ms integer,
  affected_rows integer,
  CONSTRAINT activity_logs_pkey PRIMARY KEY (id),
  CONSTRAINT activity_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.backup_logs (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  backup_type text NOT NULL CHECK (backup_type = ANY (ARRAY['manual'::text, 'scheduled'::text, 'emergency'::text])),
  status text NOT NULL CHECK (status = ANY (ARRAY['started'::text, 'completed'::text, 'failed'::text])),
  file_path text,
  file_size bigint,
  started_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  error_message text,
  initiated_by uuid,
  CONSTRAINT backup_logs_pkey PRIMARY KEY (id),
  CONSTRAINT backup_logs_initiated_by_fkey FOREIGN KEY (initiated_by) REFERENCES public.users(id)
);
CREATE TABLE public.consumable_alerts (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  consumable_id uuid,
  lab_id uuid,
  alert_type text NOT NULL CHECK (alert_type = ANY (ARRAY['low_stock'::text, 'out_of_stock'::text, 'expired'::text, 'reorder_needed'::text])),
  current_quantity integer,
  threshold_quantity integer,
  message text NOT NULL,
  priority USER-DEFINED DEFAULT 'medium'::priority_level,
  is_resolved boolean DEFAULT false,
  resolved_at timestamp with time zone,
  resolved_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT consumable_alerts_pkey PRIMARY KEY (id),
  CONSTRAINT consumable_alerts_consumable_id_fkey FOREIGN KEY (consumable_id) REFERENCES public.consumables(id),
  CONSTRAINT consumable_alerts_lab_id_fkey FOREIGN KEY (lab_id) REFERENCES public.labs(id),
  CONSTRAINT consumable_alerts_resolved_by_fkey FOREIGN KEY (resolved_by) REFERENCES public.users(id)
);
CREATE TABLE public.consumable_transactions (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  consumable_id uuid,
  transaction_type USER-DEFINED NOT NULL,
  quantity integer NOT NULL,
  unit_cost numeric,
  total_cost numeric DEFAULT ((quantity)::numeric * unit_cost),
  reference_number text,
  lab_id uuid,
  requested_by uuid,
  approved_by uuid,
  practical_session_id uuid,
  notes text,
  transaction_date timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT consumable_transactions_pkey PRIMARY KEY (id),
  CONSTRAINT consumable_transactions_consumable_id_fkey FOREIGN KEY (consumable_id) REFERENCES public.consumables(id),
  CONSTRAINT consumable_transactions_lab_id_fkey FOREIGN KEY (lab_id) REFERENCES public.labs(id),
  CONSTRAINT consumable_transactions_requested_by_fkey FOREIGN KEY (requested_by) REFERENCES public.users(id),
  CONSTRAINT consumable_transactions_approved_by_fkey FOREIGN KEY (approved_by) REFERENCES public.users(id),
  CONSTRAINT fk_consumable_transactions_practical_session FOREIGN KEY (practical_session_id) REFERENCES public.practical_sessions(id)
);
CREATE TABLE public.consumables (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  name text NOT NULL,
  description text,
  sku text UNIQUE,
  category_id uuid,
  supplier_id uuid,
  unit_of_measurement text NOT NULL,
  unit_cost numeric,
  reorder_level integer DEFAULT 0,
  max_stock_level integer,
  current_stock integer DEFAULT 0,
  is_active boolean DEFAULT true,
  is_archived boolean DEFAULT false,
  archived_at timestamp with time zone,
  archived_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT consumables_pkey PRIMARY KEY (id),
  CONSTRAINT consumables_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.equipment_categories(id),
  CONSTRAINT consumables_supplier_id_fkey FOREIGN KEY (supplier_id) REFERENCES public.suppliers(id),
  CONSTRAINT consumables_archived_by_fkey FOREIGN KEY (archived_by) REFERENCES public.users(id)
);
CREATE TABLE public.course_enrollments (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  course_id uuid,
  student_id uuid,
  enrolled_at timestamp with time zone DEFAULT now(),
  final_grade text,
  is_active boolean DEFAULT true,
  is_archived boolean DEFAULT false,
  archived_at timestamp with time zone,
  CONSTRAINT course_enrollments_pkey PRIMARY KEY (id),
  CONSTRAINT course_enrollments_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(id),
  CONSTRAINT course_enrollments_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.users(id)
);
CREATE TABLE public.courses (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  code text NOT NULL UNIQUE,
  name text NOT NULL,
  description text,
  department text NOT NULL,
  credits integer DEFAULT 3,
  semester text,
  instructor_id uuid,
  is_active boolean DEFAULT true,
  is_archived boolean DEFAULT false,
  archived_at timestamp with time zone,
  archived_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT courses_pkey PRIMARY KEY (id),
  CONSTRAINT courses_instructor_id_fkey FOREIGN KEY (instructor_id) REFERENCES public.users(id),
  CONSTRAINT courses_archived_by_fkey FOREIGN KEY (archived_by) REFERENCES public.users(id)
);
CREATE TABLE public.entity_versions (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  entity_type text NOT NULL,
  entity_id uuid NOT NULL,
  version_number integer NOT NULL,
  data_snapshot jsonb NOT NULL,
  change_summary text,
  created_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT entity_versions_pkey PRIMARY KEY (id),
  CONSTRAINT entity_versions_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(id)
);
CREATE TABLE public.equipment (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  name text NOT NULL,
  model text,
  brand text,
  serial_number text UNIQUE,
  asset_tag text NOT NULL UNIQUE,
  category_id uuid,
  lab_id uuid,
  supplier_id uuid,
  purchase_date date,
  purchase_price numeric,
  warranty_end_date date,
  status USER-DEFINED DEFAULT 'available'::equipment_status,
  condition USER-DEFINED DEFAULT 'excellent'::equipment_condition,
  specifications jsonb,
  notes text,
  qr_code text,
  location_details text,
  assigned_to uuid,
  is_archived boolean DEFAULT false,
  archived_at timestamp with time zone,
  archived_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT equipment_pkey PRIMARY KEY (id),
  CONSTRAINT equipment_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.equipment_categories(id),
  CONSTRAINT equipment_lab_id_fkey FOREIGN KEY (lab_id) REFERENCES public.labs(id),
  CONSTRAINT equipment_supplier_id_fkey FOREIGN KEY (supplier_id) REFERENCES public.suppliers(id),
  CONSTRAINT equipment_assigned_to_fkey FOREIGN KEY (assigned_to) REFERENCES public.users(id),
  CONSTRAINT equipment_archived_by_fkey FOREIGN KEY (archived_by) REFERENCES public.users(id)
);
CREATE TABLE public.equipment_alerts (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  equipment_id uuid,
  alert_type text NOT NULL CHECK (alert_type = ANY (ARRAY['maintenance_due'::text, 'warranty_expiring'::text, 'repair_needed'::text, 'calibration_due'::text])),
  message text NOT NULL,
  priority USER-DEFINED DEFAULT 'medium'::priority_level,
  is_resolved boolean DEFAULT false,
  resolved_at timestamp with time zone,
  resolved_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT equipment_alerts_pkey PRIMARY KEY (id),
  CONSTRAINT equipment_alerts_equipment_id_fkey FOREIGN KEY (equipment_id) REFERENCES public.equipment(id),
  CONSTRAINT equipment_alerts_resolved_by_fkey FOREIGN KEY (resolved_by) REFERENCES public.users(id)
);
CREATE TABLE public.equipment_calibrations (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  equipment_id uuid,
  calibration_date timestamp with time zone NOT NULL,
  next_calibration_date timestamp with time zone,
  calibrated_by uuid,
  calibration_standard text,
  results jsonb,
  certificate_number text,
  is_passed boolean NOT NULL,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT equipment_calibrations_pkey PRIMARY KEY (id),
  CONSTRAINT equipment_calibrations_equipment_id_fkey FOREIGN KEY (equipment_id) REFERENCES public.equipment(id),
  CONSTRAINT equipment_calibrations_calibrated_by_fkey FOREIGN KEY (calibrated_by) REFERENCES public.users(id)
);
CREATE TABLE public.equipment_categories (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  name text NOT NULL,
  code text NOT NULL UNIQUE,
  description text,
  parent_category_id uuid,
  is_consumable boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT equipment_categories_pkey PRIMARY KEY (id),
  CONSTRAINT equipment_categories_parent_category_id_fkey FOREIGN KEY (parent_category_id) REFERENCES public.equipment_categories(id)
);
CREATE TABLE public.equipment_depreciation (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  equipment_id uuid,
  depreciation_method text NOT NULL CHECK (depreciation_method = ANY (ARRAY['straight_line'::text, 'declining_balance'::text, 'units_of_production'::text])),
  useful_life_years integer NOT NULL,
  salvage_value numeric DEFAULT 0,
  annual_depreciation numeric,
  accumulated_depreciation numeric DEFAULT 0,
  book_value numeric,
  last_calculated timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT equipment_depreciation_pkey PRIMARY KEY (id),
  CONSTRAINT equipment_depreciation_equipment_id_fkey FOREIGN KEY (equipment_id) REFERENCES public.equipment(id)
);
CREATE TABLE public.equipment_reservations (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  equipment_id uuid,
  user_id uuid,
  practical_session_id uuid,
  reserved_from timestamp with time zone NOT NULL,
  reserved_until timestamp with time zone NOT NULL,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'confirmed'::text, 'cancelled'::text, 'completed'::text])),
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT equipment_reservations_pkey PRIMARY KEY (id),
  CONSTRAINT equipment_reservations_equipment_id_fkey FOREIGN KEY (equipment_id) REFERENCES public.equipment(id),
  CONSTRAINT equipment_reservations_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT equipment_reservations_practical_session_id_fkey FOREIGN KEY (practical_session_id) REFERENCES public.practical_sessions(id)
);
CREATE TABLE public.equipment_transfers (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  equipment_id uuid,
  from_lab_id uuid,
  to_lab_id uuid,
  transfer_reason text,
  requested_by uuid,
  approved_by uuid,
  transferred_by uuid,
  status USER-DEFINED DEFAULT 'pending'::transfer_status,
  requested_date timestamp with time zone DEFAULT now(),
  approved_date timestamp with time zone,
  completed_date timestamp with time zone,
  notes text,
  condition_before USER-DEFINED,
  condition_after USER-DEFINED,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT equipment_transfers_pkey PRIMARY KEY (id),
  CONSTRAINT equipment_transfers_equipment_id_fkey FOREIGN KEY (equipment_id) REFERENCES public.equipment(id),
  CONSTRAINT equipment_transfers_from_lab_id_fkey FOREIGN KEY (from_lab_id) REFERENCES public.labs(id),
  CONSTRAINT equipment_transfers_to_lab_id_fkey FOREIGN KEY (to_lab_id) REFERENCES public.labs(id),
  CONSTRAINT equipment_transfers_requested_by_fkey FOREIGN KEY (requested_by) REFERENCES public.users(id),
  CONSTRAINT equipment_transfers_approved_by_fkey FOREIGN KEY (approved_by) REFERENCES public.users(id),
  CONSTRAINT equipment_transfers_transferred_by_fkey FOREIGN KEY (transferred_by) REFERENCES public.users(id)
);
CREATE TABLE public.equipment_usage_log (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  equipment_id uuid,
  user_id uuid,
  practical_session_id uuid,
  checked_out_at timestamp with time zone NOT NULL,
  checked_in_at timestamp with time zone,
  condition_before USER-DEFINED,
  condition_after USER-DEFINED,
  notes text,
  issues_reported text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT equipment_usage_log_pkey PRIMARY KEY (id),
  CONSTRAINT equipment_usage_log_equipment_id_fkey FOREIGN KEY (equipment_id) REFERENCES public.equipment(id),
  CONSTRAINT equipment_usage_log_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT fk_equipment_usage_log_practical_session FOREIGN KEY (practical_session_id) REFERENCES public.practical_sessions(id)
);
CREATE TABLE public.file_attachments (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  filename text NOT NULL,
  original_filename text NOT NULL,
  file_size bigint NOT NULL,
  mime_type text NOT NULL,
  file_path text NOT NULL,
  entity_type text NOT NULL,
  entity_id uuid NOT NULL,
  uploaded_by uuid,
  uploaded_at timestamp with time zone DEFAULT now(),
  CONSTRAINT file_attachments_pkey PRIMARY KEY (id),
  CONSTRAINT file_attachments_uploaded_by_fkey FOREIGN KEY (uploaded_by) REFERENCES public.users(id)
);
CREATE TABLE public.grading_criteria (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  rubric_id uuid,
  name text NOT NULL,
  description text,
  max_points numeric NOT NULL,
  weight_percentage numeric DEFAULT 0,
  criterion_type USER-DEFINED DEFAULT 'numeric'::grading_criterion_type,
  sort_order integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT grading_criteria_pkey PRIMARY KEY (id),
  CONSTRAINT grading_criteria_rubric_id_fkey FOREIGN KEY (rubric_id) REFERENCES public.grading_rubrics(id)
);
CREATE TABLE public.grading_rubrics (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  name text NOT NULL,
  description text,
  course_id uuid,
  practical_session_id uuid,
  total_points numeric DEFAULT 100.00,
  is_active boolean DEFAULT true,
  created_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT grading_rubrics_pkey PRIMARY KEY (id),
  CONSTRAINT grading_rubrics_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(id),
  CONSTRAINT grading_rubrics_practical_session_id_fkey FOREIGN KEY (practical_session_id) REFERENCES public.practical_sessions(id),
  CONSTRAINT grading_rubrics_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(id)
);
CREATE TABLE public.lab_consumable_stock (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  lab_id uuid,
  consumable_id uuid,
  current_quantity integer DEFAULT 0,
  last_updated timestamp with time zone DEFAULT now(),
  updated_by uuid,
  CONSTRAINT lab_consumable_stock_pkey PRIMARY KEY (id),
  CONSTRAINT lab_consumable_stock_lab_id_fkey FOREIGN KEY (lab_id) REFERENCES public.labs(id),
  CONSTRAINT lab_consumable_stock_consumable_id_fkey FOREIGN KEY (consumable_id) REFERENCES public.consumables(id),
  CONSTRAINT lab_consumable_stock_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.users(id)
);
CREATE TABLE public.lab_schedules (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  lab_id uuid,
  title text NOT NULL,
  description text,
  scheduled_by uuid,
  start_time timestamp with time zone NOT NULL,
  end_time timestamp with time zone NOT NULL,
  status USER-DEFINED DEFAULT 'scheduled'::schedule_status,
  is_recurring boolean DEFAULT false,
  recurrence_pattern jsonb,
  practical_session_id uuid,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT lab_schedules_pkey PRIMARY KEY (id),
  CONSTRAINT lab_schedules_lab_id_fkey FOREIGN KEY (lab_id) REFERENCES public.labs(id),
  CONSTRAINT lab_schedules_scheduled_by_fkey FOREIGN KEY (scheduled_by) REFERENCES public.users(id),
  CONSTRAINT fk_lab_schedules_practical_session FOREIGN KEY (practical_session_id) REFERENCES public.practical_sessions(id)
);
CREATE TABLE public.lab_staff_assignments (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  lab_id uuid,
  staff_id uuid,
  role text NOT NULL DEFAULT 'assistant'::text,
  assigned_at timestamp with time zone DEFAULT now(),
  assigned_by uuid,
  is_active boolean DEFAULT true,
  CONSTRAINT lab_staff_assignments_pkey PRIMARY KEY (id),
  CONSTRAINT lab_staff_assignments_lab_id_fkey FOREIGN KEY (lab_id) REFERENCES public.labs(id),
  CONSTRAINT lab_staff_assignments_staff_id_fkey FOREIGN KEY (staff_id) REFERENCES public.users(id),
  CONSTRAINT lab_staff_assignments_assigned_by_fkey FOREIGN KEY (assigned_by) REFERENCES public.users(id)
);
CREATE TABLE public.labs (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  name text NOT NULL,
  code text NOT NULL UNIQUE,
  description text,
  location text NOT NULL,
  floor_number integer,
  capacity integer NOT NULL DEFAULT 0,
  lab_manager_id uuid,
  is_active boolean DEFAULT true,
  is_archived boolean DEFAULT false,
  archived_at timestamp with time zone,
  archived_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT labs_pkey PRIMARY KEY (id),
  CONSTRAINT labs_lab_manager_id_fkey FOREIGN KEY (lab_manager_id) REFERENCES public.users(id),
  CONSTRAINT labs_archived_by_fkey FOREIGN KEY (archived_by) REFERENCES public.users(id)
);
CREATE TABLE public.maintenance_records (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  equipment_id uuid,
  maintenance_type USER-DEFINED NOT NULL,
  description text NOT NULL,
  scheduled_date timestamp with time zone,
  completed_date timestamp with time zone,
  technician_id uuid,
  cost numeric,
  priority USER-DEFINED DEFAULT 'medium'::priority_level,
  notes text,
  attachments jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT maintenance_records_pkey PRIMARY KEY (id),
  CONSTRAINT maintenance_records_equipment_id_fkey FOREIGN KEY (equipment_id) REFERENCES public.equipment(id),
  CONSTRAINT maintenance_records_technician_id_fkey FOREIGN KEY (technician_id) REFERENCES public.users(id)
);
CREATE TABLE public.notifications (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid,
  title text NOT NULL,
  message text NOT NULL,
  type text DEFAULT 'info'::text CHECK (type = ANY (ARRAY['info'::text, 'warning'::text, 'error'::text, 'success'::text])),
  is_read boolean DEFAULT false,
  related_entity_type text,
  related_entity_id uuid,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT notifications_pkey PRIMARY KEY (id),
  CONSTRAINT notifications_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.practical_attendance (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  practical_session_id uuid,
  student_id uuid,
  status text DEFAULT 'absent'::text CHECK (status = ANY (ARRAY['present'::text, 'absent'::text, 'late'::text, 'excused'::text])),
  check_in_time timestamp with time zone,
  check_out_time timestamp with time zone,
  notes text,
  marked_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT practical_attendance_pkey PRIMARY KEY (id),
  CONSTRAINT practical_attendance_practical_session_id_fkey FOREIGN KEY (practical_session_id) REFERENCES public.practical_sessions(id),
  CONSTRAINT practical_attendance_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.users(id),
  CONSTRAINT practical_attendance_marked_by_fkey FOREIGN KEY (marked_by) REFERENCES public.users(id)
);
CREATE TABLE public.practical_sessions (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  title text NOT NULL,
  description text,
  course_id uuid,
  student_group_id uuid,
  lab_id uuid,
  instructor_id uuid,
  scheduled_date timestamp with time zone NOT NULL,
  duration_minutes integer DEFAULT 120 CHECK (duration_minutes > 0 AND duration_minutes <= 480),
  max_students integer,
  status USER-DEFINED DEFAULT 'scheduled'::practical_status,
  objectives jsonb,
  required_equipment jsonb,
  required_consumables jsonb,
  instructions text,
  is_archived boolean DEFAULT false,
  archived_at timestamp with time zone,
  archived_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT practical_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT practical_sessions_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(id),
  CONSTRAINT practical_sessions_student_group_id_fkey FOREIGN KEY (student_group_id) REFERENCES public.student_groups(id),
  CONSTRAINT practical_sessions_lab_id_fkey FOREIGN KEY (lab_id) REFERENCES public.labs(id),
  CONSTRAINT practical_sessions_instructor_id_fkey FOREIGN KEY (instructor_id) REFERENCES public.users(id),
  CONSTRAINT practical_sessions_archived_by_fkey FOREIGN KEY (archived_by) REFERENCES public.users(id)
);
CREATE TABLE public.practical_submissions (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  practical_session_id uuid,
  student_id uuid,
  submission_status USER-DEFINED DEFAULT 'pending'::submission_status,
  submitted_at timestamp with time zone,
  late_submission boolean DEFAULT false,
  submission_files jsonb,
  submission_text text,
  overall_grade numeric,
  max_grade numeric DEFAULT 100.00,
  feedback text,
  graded_by uuid,
  graded_at timestamp with time zone,
  is_archived boolean DEFAULT false,
  archived_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT practical_submissions_pkey PRIMARY KEY (id),
  CONSTRAINT practical_submissions_practical_session_id_fkey FOREIGN KEY (practical_session_id) REFERENCES public.practical_sessions(id),
  CONSTRAINT practical_submissions_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.users(id),
  CONSTRAINT practical_submissions_graded_by_fkey FOREIGN KEY (graded_by) REFERENCES public.users(id)
);
CREATE TABLE public.safety_incidents (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  lab_id uuid,
  incident_date timestamp with time zone NOT NULL,
  incident_type text NOT NULL CHECK (incident_type = ANY (ARRAY['injury'::text, 'equipment_damage'::text, 'chemical_spill'::text, 'fire'::text, 'other'::text])),
  severity text NOT NULL CHECK (severity = ANY (ARRAY['minor'::text, 'moderate'::text, 'major'::text, 'critical'::text])),
  description text NOT NULL,
  people_involved jsonb,
  equipment_involved jsonb,
  immediate_actions text,
  follow_up_required boolean DEFAULT false,
  reported_by uuid,
  investigated_by uuid,
  status text DEFAULT 'reported'::text CHECK (status = ANY (ARRAY['reported'::text, 'investigating'::text, 'resolved'::text, 'closed'::text])),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT safety_incidents_pkey PRIMARY KEY (id),
  CONSTRAINT safety_incidents_lab_id_fkey FOREIGN KEY (lab_id) REFERENCES public.labs(id),
  CONSTRAINT safety_incidents_reported_by_fkey FOREIGN KEY (reported_by) REFERENCES public.users(id),
  CONSTRAINT safety_incidents_investigated_by_fkey FOREIGN KEY (investigated_by) REFERENCES public.users(id)
);
CREATE TABLE public.session_consumable_requirements (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  practical_session_id uuid,
  consumable_id uuid,
  quantity_required integer DEFAULT 1,
  is_mandatory boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT session_consumable_requirements_pkey PRIMARY KEY (id),
  CONSTRAINT session_consumable_requirements_practical_session_id_fkey FOREIGN KEY (practical_session_id) REFERENCES public.practical_sessions(id),
  CONSTRAINT session_consumable_requirements_consumable_id_fkey FOREIGN KEY (consumable_id) REFERENCES public.consumables(id)
);
CREATE TABLE public.session_equipment_requirements (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  practical_session_id uuid,
  equipment_id uuid,
  quantity_required integer DEFAULT 1,
  is_mandatory boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT session_equipment_requirements_pkey PRIMARY KEY (id),
  CONSTRAINT session_equipment_requirements_practical_session_id_fkey FOREIGN KEY (practical_session_id) REFERENCES public.practical_sessions(id),
  CONSTRAINT session_equipment_requirements_equipment_id_fkey FOREIGN KEY (equipment_id) REFERENCES public.equipment(id)
);
CREATE TABLE public.student_group_memberships (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  group_id uuid,
  student_id uuid,
  joined_at timestamp with time zone DEFAULT now(),
  is_active boolean DEFAULT true,
  CONSTRAINT student_group_memberships_pkey PRIMARY KEY (id),
  CONSTRAINT student_group_memberships_group_id_fkey FOREIGN KEY (group_id) REFERENCES public.student_groups(id),
  CONSTRAINT student_group_memberships_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.users(id)
);
CREATE TABLE public.student_groups (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  name text NOT NULL,
  code text NOT NULL UNIQUE,
  course_id uuid,
  description text,
  max_students integer DEFAULT 30,
  instructor_id uuid,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT student_groups_pkey PRIMARY KEY (id),
  CONSTRAINT student_groups_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(id),
  CONSTRAINT student_groups_instructor_id_fkey FOREIGN KEY (instructor_id) REFERENCES public.users(id)
);
CREATE TABLE public.submission_grades (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  submission_id uuid,
  criterion_id uuid,
  points_earned numeric NOT NULL,
  comments text,
  graded_by uuid,
  graded_at timestamp with time zone DEFAULT now(),
  CONSTRAINT submission_grades_pkey PRIMARY KEY (id),
  CONSTRAINT submission_grades_submission_id_fkey FOREIGN KEY (submission_id) REFERENCES public.practical_submissions(id),
  CONSTRAINT submission_grades_criterion_id_fkey FOREIGN KEY (criterion_id) REFERENCES public.grading_criteria(id),
  CONSTRAINT submission_grades_graded_by_fkey FOREIGN KEY (graded_by) REFERENCES public.users(id)
);
CREATE TABLE public.suppliers (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  name text NOT NULL,
  contact_person text,
  email text,
  phone text,
  address text,
  website text,
  is_active boolean DEFAULT true,
  is_archived boolean DEFAULT false,
  archived_at timestamp with time zone,
  archived_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT suppliers_pkey PRIMARY KEY (id),
  CONSTRAINT suppliers_archived_by_fkey FOREIGN KEY (archived_by) REFERENCES public.users(id)
);
CREATE TABLE public.system_settings (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  setting_key text NOT NULL UNIQUE,
  setting_value jsonb NOT NULL,
  description text,
  is_public boolean DEFAULT false,
  updated_by uuid,
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT system_settings_pkey PRIMARY KEY (id),
  CONSTRAINT system_settings_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.users(id)
);
CREATE TABLE public.users (
  id uuid NOT NULL,
  email text NOT NULL UNIQUE,
  first_name text NOT NULL,
  last_name text NOT NULL,
  role USER-DEFINED NOT NULL DEFAULT 'student'::user_role,
  phone_number text,
  employee_id text UNIQUE,
  student_id text UNIQUE,
  department text,
  is_active boolean DEFAULT true,
  is_archived boolean DEFAULT false,
  profile_image_url text,
  last_login timestamp with time zone,
  archived_at timestamp with time zone,
  archived_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  auth_provider text DEFAULT 'email'::text,
  provider_id text,
  registration_completed boolean DEFAULT false,
  profile_completed boolean DEFAULT false,
  email_verified boolean DEFAULT false,
  CONSTRAINT users_pkey PRIMARY KEY (id),
  CONSTRAINT users_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id),
  CONSTRAINT users_archived_by_fkey FOREIGN KEY (archived_by) REFERENCES public.users(id)
);